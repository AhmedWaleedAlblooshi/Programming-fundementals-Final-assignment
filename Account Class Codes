For the diagram:

class Account:
    """Class representing a User Account"""
    def __init__(self, account_id, username, password, balance, created_at):
        self._aAccountId = account_id
        self._aUsername = username
        self._aPassword = password
        self._aBalance = balance
        self._aCreatedAt = created_at

    def set_account_id(self, account_id):
        self._aAccountId = account_id

    def get_account_id(self):
        return self._aAccountId

    def set_username(self, username):
        self._aUsername = username

    def get_username(self):
        return self._aUsername

    def set_password(self, password):
        self._aPassword = password

    def get_password(self):
        return self._aPassword

    def set_balance(self, balance):
        self._aBalance = balance

    def get_balance(self):
        return self._aBalance

    def set_created_at(self, created_at):
        self._aCreatedAt = created_at

    def get_created_at(self):
        return self._aCreatedAt

    def get_details(self):
        return f"Account {self._aAccountId}, Username: {self._aUsername}, Balance: {self._aBalance}"





for the pickle:

class Account:
    def __init__(self, aAccountId,  aUsername, aPassword):
        self.aAccountId = aAccountId
        self.aUsername = aUsername
        self.aPassword = aPassword
        self.aBalance = 0.0
        self.aCreatedAt = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    def createAccount(self):
        print(f"Account for {self.aUsername} has been created.")

    def login(self, username, password):
        if username == self.aUsername and password == self.aPassword:
            print(f"{self.aUsername} has logged in.")
            return True

        raise ValueError("Invalid username or password provided!")

    def checkBalance(self):
        return self.aBalance

